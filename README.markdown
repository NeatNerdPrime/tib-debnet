# debnet #

####Table of Contents

1. [Overview](#overview)
2. [Module Description - What the module does](#module-description)
3. [Setup - Basic usage of module debnet](#setup)
    * [Beginning with the module](#beginning-with-the-module)
    * [Available configuration methods](#available-configuration-methods)
    * [Configuring the loopback interface](#configuring-the-loopback-interface)
    * [Static IPv4 configuration](#static-ipv4-interface-configuration)
    * [DHCP configuration](#dhcp-configuration)
4. [Advanced configuration methods](#advanced-configuration-methods)
    * [Raw interface configuration](#Raw-interface-configuration)
    * [Bridge configuration](#bridge-configuration)
    * [Bonding configuration](#bonding-configuration)
    * [Using Up and down command hooks](#using-up-and-down-command-hooks)
5. [Feature helpers](*feature-helpers)
    * [Queue length](*queue-length)

##Overview

This module constructs the ```/etc/network/interfaces``` file on Debian based 
Linux distributions and enables an easy configuration of sophisticated
network setups, such as bridges and bonding configurations.

##Module Description

This module lets you use many ```debnet::iface``` resourses for setting up
network interfaces.

##Setup

Declaring a single resource of this module will cause debnet to take control
over the file ```/etc/network/interfaces``` which than will contain stanzas
generated by the module only. Every declaration of ```debnet::iface```
resources will create a corresponding stanza in ```/etc/network/interfaces```.

###Beginning with the module
To start with the debnet module the node can simply declare resources. Many
nodes need at least a loopback interface which might look like:

```puppet
debnet::iface::loopback { 'lo': }
```
Many other declaration may follow. Each of which will create an interface
configuration. There are specialized resources available for many kind of
configuration tasks, however, you may also use the simple ```debnet::iface```
resource to create generic interface stanzas. Be aware, that the specialized
resources do some more validation, which makes the configuration less error
prone.

In many resources of the module you may use attributes ```ups```, ```downs```,
```pre-ups``` and ```post-downs``` declaring arrays of commands which will be
called on the specific events. By declaring the attribute ```aux_ops``` with a
hash, it is possilble to add auxiliary options to the interface stanza, which
will be generated by using the key as option name and the value to the key as
value. This obviously has the limitation of having every option name ones,
however, the most important case this is useful, the up and down hooks can be
handled through ```ups```, ```downs```, ```pre-ups``` and ```post-downs```
attributes.

###Available configuration methods
The resource debnet::iface{} implements different configuration methods
also available for the interfaces(5) stanzas. Currently supported methods
are:
* loopback
* static
* dhcp
* manual

###Configuring the loopback interface
Currently there is on a single way to create a configuration on the
loopback interface.

```puppet
debnet::iface::loopback { 'lo': }
```

###Static IPv4 interface configuration
For a static IP configuration the attributes address and netmask are mandatory.
Attributes broadcast, gateway, pointopoint, hwaddress, mtu and scope are
optional.

```puppet
debnet::iface::static { 'eth0':
  address => '192.168.0.10',
  netmask => '24',
  gateway => '192.168.0.1',
}
```

Available attributes:
*  ```$ifname``` - (mandatory) iface name (default: ```$title```)
*  ```$address``` - (mandatory) static address
*  ```$netmask``` - (mandatory) netmask 
*  ```$broadcast``` - (optional) broadcast address
*  ```$metric``` - (optional) metric for routeing protocols
*  ```$gateway``` - (optional) gateway to set default route
*  ```$pointopoint``` - (optional) point-to-point address
*  ```$hwaddress``` - (optional) hardware address to override with
*  ```$mtu``` - (optional) interface MTU
*  ```$scope``` - (optional) address scope

###DHCP configuration
Configuring an interface by dhcp is enabled through method set to 
according. Optional attributes hostname, metric, leasetime, vendor, client
and hwaddress may be set.

```puppet
debnet::iface::dhcp { 'eth0': }
```

##Advanced configuration methods
Using the specialised resources is convenient but not feasable in some
circumstances. Therefore it might be necessera, however, to create
configurations using the ```debnet::iface``` generic resource type.

###Raw interface configuration
The above examples can be alternatively configured by using ```debnet::iface```
typo as follows:

Loopback interface:
```puppet
debnet::iface { 'lo':
  method => 'loopback',
}
```

Static interface:
```puppet
debnet::iface { 'eth0':
  method  => 'static',
  address => '192.168.0.10',
  netmask => '24',
  gateway => '192.168.0.1',
}
```
DHCP configuration:
```puppet
debnet::iface { 'eth0':
  method => 'dhcp',
}
```

###Bridge configuration
Configuring a software bridge is enabled by declaring a resource of type
debnet::iface::bridge. Mandatory attribute is the method of configuration of
the bridge interface. Depending on the method, the mandatory attributes
of the choosen method are also mandatory for the bridge resource. Optional
attributes are ports, stp, prio, fwdelay and hello.

An example for configuring a bridge is:
```puppet
debnet::iface::bridge { 'br0':
  ports  => ['eth1','eth2'],
  stp    => true,
  method => 'manual',
}
```

The debnet::iface::bridge resource is defining interfaces for many ports of the
bridge with manual configuration to inhibit multiple use of the same interface.

###Bonding configuration
The module allows to bond multiple interfaces together by configuring a linux
bonding device.

```puppet
debnet::iface::bond { 'bond0':
  ports => ['eth1', 'eth2'],
  method => 'manual',
}
```

Available attributes:
* ports - array of slave interfaces
* mode - string with bonding mode, supported modes are: balance-rr,
 active-backup, balance-xor, broadcast, 802.3ad, balance-tlb, balance-alb.
* miimon - integer setting of mii monitor timing
* use_carrier - bool to enable carrier sense (if supported)
* updelay - integer setting the updelay timer
* downdelay - integer setting the downdelay timer

Such a configuration will create the interfaces(5) stanzas for many ports and
the bonding device. The array in argument ports must have at least one item,
and the first item will be configured as bond-primary.

###Using Up and down command hooks
Many debnet resources allow to add commands to the usual up/down hooks. The
attributes pre_ups, ups, downs and post_downs are available for many resources.
Each of which are typed as array and many elements will be added in order as
pre-up, up, down or post-down options, respectively. High care must be taken 
while using these attributes, since the module does not do any kind of checks.

```puppet
debnet::iface::dhcp { 'eth0':
  ups   => ['echo "eth0 is up"'],
  downs => ['echo "eth0 is going down"']
}
```

##Feature helpers
The module provides feature helpers to enable sofisticated configuration
features to be added easily.

###Queue length
If the setting of the txqueuelen feature of ethernet interfaces needs to done,
the attribute ```tx_queue``` can be added to any resource type other than
loopback. The helper adds an up command to 
```ip link set <if> txqueuelen <value>```. In case of types bond and bridge, the
up command is applied to the corresponding slave interfaces.
